// Generated by CoffeeScript 1.3.3
(function() {
  var Globule, LavaLamp, MIDDLE, MOVE_MULTIPLIER, RANDOMNESS, SPEED, WIDTH,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  SPEED = 10;

  WIDTH = 350;

  RANDOMNESS = 120;

  MIDDLE = WIDTH / 2;

  MOVE_MULTIPLIER = 50;

  Globule = (function() {

    function Globule(x, y) {
      this.x = x;
      this.y = y;
      this.base = this.y;
      this.img = new Image();
      this.img.src = 'lava.png';
    }

    Globule.prototype.excite = function() {
      this.exciteByHeat();
      return this.exciteByProximity();
    };

    Globule.prototype.exciteByHeat = function() {
      return this.y = this.y - (Math.random() * this.heatMultiplier()) + this.randomizer();
    };

    Globule.prototype.heatMultiplier = function() {
      var dist;
      dist = Math.abs(this.base - this.y);
      if (dist < this.base / 4) {
        return 0.5;
      }
      if (dist < 2 * this.base / 4) {
        return 0.2;
      }
      if (dist < 3 * this.base / 4) {
        return 0.1;
      }
      if (dist < 4 * this.base / 4) {
        return -0.2;
      }
      return -0.5;
    };

    Globule.prototype.randomizer = function() {
      return (Math.random() - 0.5) * RANDOMNESS;
    };

    Globule.prototype.exciteByProximity = function() {
      return this.x = this.x + (Math.random() * this.proximityMultiplier() * SPEED);
    };

    Globule.prototype.proximityMultiplier = function() {
      var dist;
      dist = Math.abs(this.x);
      if (dist < MIDDLE - (WIDTH / 2)) {
        return 0.5;
      }
      if (dist < MIDDLE) {
        return 0.2;
      }
      if (dist < MIDDLE + (WIDTH / 2)) {
        return -0.2;
      }
      if (dist < WIDTH) {
        return -0.5;
      }
      return -0.5;
    };

    Globule.prototype.paint = function(ctx) {
      ctx.drawImage(this.img, this.x - 5, this.y - 5);
      return this.excite();
    };

    return Globule;

  })();

  LavaLamp = (function() {

    function LavaLamp() {
      this.run = __bind(this.run, this);
      this.initSurface();
      this.initPhysics();
      this.run();
    }

    LavaLamp.prototype.initSurface = function() {
      this.elem = document.getElementsByTagName('canvas')[0];
      return this.ctx = this.elem.getContext('2d');
    };

    LavaLamp.prototype.initPhysics = function() {
      return this.globules = this.initializeGlobules();
    };

    LavaLamp.prototype.initializeGlobules = function() {
      var n, _i, _results;
      _results = [];
      for (n = _i = 0; _i <= 300; n = ++_i) {
        _results.push(new Globule(n, this.elem.height - 5));
      }
      return _results;
    };

    LavaLamp.prototype.run = function() {
      var g, _i, _len, _ref;
      this.drawBg();
      _ref = this.globules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        g.paint(this.ctx);
      }
      return setTimeout(this.run, 100);
    };

    LavaLamp.prototype.drawBg = function() {
      this.ctx.fillStyle = '#000';
      return this.ctx.fillRect(0, 0, 300, 200);
    };

    return LavaLamp;

  })();

  window.document.body.onload = function() {
    return new LavaLamp();
  };

  window.document.onkeypress = function(event) {
    if (event.charCode === 104) {
      MIDDLE -= MOVE_MULTIPLIER;
    }
    if (event.charCode === 108) {
      return MIDDLE += MOVE_MULTIPLIER;
    }
  };

}).call(this);
