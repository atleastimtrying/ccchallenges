// Generated by CoffeeScript 1.4.0
(function() {
  var Animation,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Animation = (function() {

    function Animation() {
      this.calcStyle = __bind(this.calcStyle, this);

      this.foursquares = __bind(this.foursquares, this);

      this.mousemove = __bind(this.mousemove, this);
      this.setupVars();
      this.setupBindings();
    }

    Animation.prototype.setupVars = function() {
      this.canvas = document.getElementsByTagName('canvas')[0];
      this.ctx = this.canvas.getContext('2d');
      this.x = 0;
      this.y = 0;
      this.r = 45;
      this.width = 700;
      this.height = 250;
      return this.clear();
    };

    Animation.prototype.setupBindings = function() {
      return this.canvas.addEventListener('mousemove', this.mousemove, false);
    };

    Animation.prototype.mousemove = function(event) {
      var x, y;
      x = event.offsetX;
      y = event.offsetY;
      return this.draw(x, y);
    };

    Animation.prototype.draw = function(x, y) {
      this.background();
      this.r %= 360;
      this.r += 10;
      this.ctx.strokeStyle = this.calcStyle(x, y, this.r);
      return this.place(x, y, this.r, this.foursquares);
    };

    Animation.prototype.foursquares = function() {
      this.ctx.strokeRect(-25, -5, 10, 10);
      this.ctx.strokeRect(15, -5, 10, 10);
      this.ctx.strokeRect(-5, 15, 10, 10);
      return this.ctx.strokeRect(-5, -25, 10, 10);
    };

    Animation.prototype.place = function(x, y, r, fn) {
      this.ctx.translate(x, y);
      this.ctx.rotate(this.rad(r));
      fn();
      this.ctx.rotate(this.rad(-r));
      return this.ctx.translate(-x, -y);
    };

    Animation.prototype.calcStyle = function(x, y, r) {
      var b, g;
      r = Math.round((x / this.width) * 255);
      g = Math.round((y / this.height) * 255);
      b = Math.round((r / 360) * 255);
      return "rgb(" + r + "," + g + "," + b + ")";
    };

    Animation.prototype.background = function() {
      this.ctx.fillStyle = 'rgba(255,255,255,0.2)';
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    Animation.prototype.rad = function(degrees) {
      return degrees * Math.PI / 180;
    };

    Animation.prototype.clear = function() {
      this.canvas.width = this.width;
      return this.canvas.height = this.height;
    };

    return Animation;

  })();

  window.onload = function() {
    return window.animation = new Animation();
  };

}).call(this);
