// Generated by CoffeeScript 1.3.3
(function() {
  var Hugo, NamedParticle, launcher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NamedParticle = (function(_super) {

    __extends(NamedParticle, _super);

    function NamedParticle(name, mass) {
      this.name = name;
      NamedParticle.__super__.constructor.call(this, mass);
    }

    return NamedParticle;

  })(Particle);

  Hugo = (function() {

    function Hugo(json) {
      this.json = json;
      this.animate = __bind(this.animate, this);

      this.canvas = document.getElementById('display');
      this.setupGraphics();
      this.buildElements();
      this.repulsify();
      this.animate();
    }

    Hugo.prototype.setupGraphics = function() {
      var _ref;
      this.size = (_ref = [730, 500], this.width = _ref[0], this.height = _ref[1], _ref);
      return this.size_with_border = [this.width - 20, this.height - 20];
    };

    Hugo.prototype.buildElements = function() {
      this.physics = new Physics();
      this.collision = new Collision();
      this.edgebounce = new EdgeBounce(new Vector(0, 0), (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t = typeof result;
        return t == "object" || t == "function" ? result || child : child;
      })(Vector, this.size_with_border, function(){}));
      this.centerAttraction = new Attraction(new Vector(this.width / 2, this.height / 2));
      return this.buildAssociativeOrArray(this.json, this.buildString("START"));
    };

    Hugo.prototype.repulsify = function() {
      var other_particle, particle, repulse, _i, _len, _ref, _results;
      _ref = this.physics.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        particle = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.physics.particles;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            other_particle = _ref1[_j];
            repulse = new Attraction(particle.pos, 150, -1000);
            _results1.push(other_particle.behaviours.push(repulse));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Hugo.prototype.buildAssociativeOrArray = function(obj, parent) {
      if (this._isArray(obj)) {
        return this.buildArray(obj, parent);
      }
      if (this._isString(obj)) {
        return this.buildString(obj, parent);
      }
      return this.buildAssociative(obj, parent);
    };

    Hugo.prototype.buildAssociative = function(hsh, parent) {
      var k, key_particle, val_particle;
      for (k in hsh) {
        key_particle = this.addParticle(k);
        this.linkParticles(parent, key_particle);
        val_particle = this.buildAssociativeOrArray(hsh[k], key_particle);
        this.linkParticles(key_particle, val_particle);
      }
      return parent;
    };

    Hugo.prototype.buildString = function(str, parent) {
      return this.addParticle(str);
    };

    Hugo.prototype.buildArray = function(arr, parent) {
      var item, _i, _len;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        this.linkParticles(parent, this.buildAssociativeOrArray(item));
      }
      return parent;
    };

    Hugo.prototype.addParticle = function(name) {
      var p;
      p = new NamedParticle(name);
      p.setRadius(10);
      p.setMass(10);
      p.pos = new Vector(Random(0, this.width), Random(0, this.height));
      p.vel = new Vector(Random(-100, 100), Random(-100, 100));
      this.physics.particles.push(p);
      this.makeCollidable(p);
      return p;
    };

    Hugo.prototype.makeCollidable = function(p) {
      p.behaviours.push(this.collision, this.edgebounce, this.centerAttraction);
      return this.collision.pool.push(p);
    };

    Hugo.prototype.linkParticles = function(p1, p2) {
      return this.physics.springs.push(new Spring(p1, p2, 30));
    };

    Hugo.prototype.animate = function() {
      var _ref;
      this.physics.step();
      if (!this.renderer) {
        this.renderer = new CanvasRenderer(this.canvas);
        (_ref = this.renderer).setSize.apply(_ref, this.size);
      }
      this.renderer.render(this.physics);
      return requestAnimationFrame(this.animate);
    };

    Hugo.prototype._isArray = function(obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };

    Hugo.prototype._isString = function(obj) {
      return (typeof obj) === 'string';
    };

    return Hugo;

  })();

  launcher = function() {
    return new Hugo(window.my_json);
  };

  document.body.onload = launcher;

}).call(this);
